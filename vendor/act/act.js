// Generated by CoffeeScript 1.9.2
(function() {
  window.Act = function(init_state, mode, timeout) {
    var obj;
    if (!(Imuta.is_number(timeout)) || (timeout <= 0) || !(mode === "pure" || mode === "global_state")) {
      throw new Error("Act timeout is number >= 0, Act mode is pure or global_state");
    }
    obj = {};
    switch (mode) {
      case "pure":
        obj = {
          state: Imuta.clone(init_state),
          queue: [],
          init: function() {
            var error, this_ref;
            try {
              while (this.queue.length !== 0) {
                this.state = Imuta.clone(this.queue.shift()(this.state));
              }
            } catch (_error) {
              error = _error;
              console.log("Actor error");
              console.log(error);
            }
            this_ref = this;
            return setTimeout((function() {
              return this_ref.init();
            }), timeout);
          },
          cast: function(func) {
            if ((func.length === 1) && Imuta.is_function(func)) {
              this.queue.push(Imuta.clone(func));
              return this.queue.length;
            } else {
              throw new Error("Act expects functions arity == 1 (single arg is actor's state)");
            }
          },
          zcast: function(func) {
            if ((func.length === 0) && Imuta.is_function(func)) {
              this.queue.push((function(state) {
                Imuta.clone(func)();
                return state;
              }));
              return this.queue.length;
            } else {
              throw new Error("Act expects functions arity == 0");
            }
          },
          get: function() {
            return Imuta.clone(this.state);
          }
        };
        break;
      case "global_state":
        obj = {
          state: init_state,
          queue: [],
          init: function() {
            var error, this_ref;
            try {
              while (this.queue.length !== 0) {
                this.state = this.queue.shift()(this.state);
              }
            } catch (_error) {
              error = _error;
              console.log("Actor error");
              console.log(error);
            }
            this_ref = this;
            return setTimeout((function() {
              return this_ref.init();
            }), timeout);
          },
          cast: function(func) {
            if ((func.length === 1) && Imuta.is_function(func)) {
              this.queue.push(Imuta.clone(func));
              return this.queue.length;
            } else {
              throw new Error("Act expects functions arity == 1 (single arg is actor's state)");
            }
          },
          zcast: function(func) {
            if ((func.length === 0) && Imuta.is_function(func)) {
              this.queue.push((function(state) {
                Imuta.clone(func)();
                return state;
              }));
              return this.queue.length;
            } else {
              throw new Error("Act expects functions arity == 0");
            }
          },
          get: function() {
            return this.state;
          }
        };
    }
    obj.init();
    return obj;
  };

}).call(this);
